generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id        String    @id @default(cuid())
  name      String    @unique
  domain    String?   @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  contacts  Contact[]
}

model Contact {
  id                     String              @id @default(cuid())
  fullName               String
  email                  String?
  phone                  String?
  position               String?
  companyId              String?
  notes                  String?
  businessCardImage      String?
  profileImage           String?
  introducedById         String?
  legacyTags             String              @default("[]")
  importance             Int                 @default(1)
  lastContactAt          DateTime?
  networkDegree          Int                 @default(0)
  networkBetweenness     Float               @default(0.0)
  networkCloseness       Float               @default(0.0)
  networkPageRank        Float               @default(0.0)
  networkValue           Int                 @default(0)
  networkLastAnalyzed    DateTime?
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  introducedBy           Contact?            @relation("Introduction", fields: [introducedById], references: [id])
  introduced             Contact[]           @relation("Introduction")
  company                Company?            @relation(fields: [companyId], references: [id])
  contactGroups          ContactGroup[]
  history                ContactHistory[]
  contactTags            ContactTag[]
  followUpHistory        FollowUpHistory[]
  networkConnectionsTo   NetworkConnection[] @relation("ConnectionTo")
  networkConnectionsFrom NetworkConnection[] @relation("ConnectionFrom")
  reminders              Reminder[]
}

model ContactHistory {
  id        String   @id @default(cuid())
  contactId String
  type      String
  subject   String?
  notes     String?
  createdAt DateTime @default(now())
  contact   Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
}

model NetworkConnection {
  id               String    @id @default(cuid())
  fromId           String
  toId             String
  type             String    @default("business")
  strength         Int       @default(0)
  sharedProjects   Int       @default(0)
  meetingCount     Int       @default(0)
  emailExchanges   Int       @default(0)
  introductionDate DateTime?
  lastInteraction  DateTime?
  isActive         Boolean   @default(true)
  confidence       Float     @default(0.0)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  to               Contact   @relation("ConnectionTo", fields: [toId], references: [id], onDelete: Cascade)
  from             Contact   @relation("ConnectionFrom", fields: [fromId], references: [id], onDelete: Cascade)

  @@unique([fromId, toId])
}

model Reminder {
  id                String   @id @default(cuid())
  contactId         String
  type              String
  title             String
  description       String?
  reminderAt        DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  isCompleted       Boolean  @default(false)
  isActive          Boolean  @default(true)
  isRecurring       Boolean  @default(false)
  recurringType     String?
  recurringInterval Int?     @default(1)
  notifyBefore      Int?
  isNotified        Boolean  @default(false)
  priority          String   @default("medium")
  category          String?
  contact           Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
}

model FollowUpHistory {
  id             String    @id @default(cuid())
  contactId      String
  type           String
  subject        String?
  notes          String?
  result         String?
  followUpAt     DateTime
  createdAt      DateTime  @default(now())
  reminderId     String?
  nextFollowUpAt DateTime?
  contact        Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)
}

model Tag {
  id           String       @id @default(cuid())
  name         String       @unique
  color        String       @default("#3B82F6")
  description  String?
  contactCount Int          @default(0)
  isSystem     Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  contactTags  ContactTag[]
  groupTags    GroupTag[]
}

model Group {
  id            String         @id @default(cuid())
  name          String         @unique
  description   String?
  color         String         @default("#10B981")
  type          String         @default("custom")
  conditions    String?
  contactCount  Int            @default(0)
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  contactGroups ContactGroup[]
  tags          GroupTag[]
}

model ContactTag {
  id        String   @id @default(cuid())
  contactId String
  tagId     String
  addedAt   DateTime @default(now())
  addedBy   String?
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  contact   Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@unique([contactId, tagId])
}

model ContactGroup {
  id        String   @id @default(cuid())
  contactId String
  groupId   String
  addedAt   DateTime @default(now())
  addedBy   String?
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  contact   Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@unique([contactId, groupId])
}

model GroupTag {
  id      String @id @default(cuid())
  groupId String
  tagId   String
  tag     Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, tagId])
}
