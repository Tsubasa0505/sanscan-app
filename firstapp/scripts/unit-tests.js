// SanScan Âçò‰Ωì„ÉÜ„Çπ„Éà„Çπ„Ç§„Éº„Éà
const assert = require('assert');
const BASE_URL = 'http://localhost:3010';

// „ÉÜ„Çπ„ÉàÁî®„É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£
class TestRunner {
  constructor() {
    this.results = {
      passed: 0,
      failed: 0,
      skipped: 0,
      tests: []
    };
  }

  async test(name, testFn) {
    try {
      await testFn();
      console.log(`  ‚úÖ ${name}`);
      this.results.passed++;
      this.results.tests.push({ name, status: 'passed' });
    } catch (error) {
      console.log(`  ‚ùå ${name}`);
      console.log(`     ‚Üí ${error.message}`);
      this.results.failed++;
      this.results.tests.push({ name, status: 'failed', error: error.message });
    }
  }

  skip(name) {
    console.log(`  ‚è≠Ô∏è  ${name} („Çπ„Ç≠„ÉÉ„Éó)`);
    this.results.skipped++;
    this.results.tests.push({ name, status: 'skipped' });
  }

  printSummary() {
    console.log('\n' + '='.repeat(60));
    console.log('üìä Âçò‰Ωì„ÉÜ„Çπ„ÉàÁµêÊûú„Çµ„Éû„É™„Éº');
    console.log('='.repeat(60));
    console.log(`‚úÖ ÊàêÂäü: ${this.results.passed}‰ª∂`);
    console.log(`‚ùå Â§±Êïó: ${this.results.failed}‰ª∂`);
    console.log(`‚è≠Ô∏è  „Çπ„Ç≠„ÉÉ„Éó: ${this.results.skipped}‰ª∂`);
    const total = this.results.passed + this.results.failed;
    if (total > 0) {
      console.log(`üìà ÊàêÂäüÁéá: ${(this.results.passed / total * 100).toFixed(1)}%`);
    }
  }
}

// „É°„Ç§„É≥„ÉÜ„Çπ„ÉàÈñ¢Êï∞
async function runUnitTests() {
  console.log('üß™ SanScan Âçò‰Ωì„ÉÜ„Çπ„Éà„Çπ„Ç§„Éº„ÉàÈñãÂßã\n');
  const runner = new TestRunner();

  // ========== 1. API „Ç®„É≥„Éâ„Éù„Ç§„É≥„ÉàÂçò‰Ωì„ÉÜ„Çπ„Éà ==========
  console.log('\nüìÅ 1. API„Ç®„É≥„Éâ„Éù„Ç§„É≥„ÉàÂçò‰Ωì„ÉÜ„Çπ„Éà');
  
  // 1.1 ÈÄ£Áµ°ÂÖàAPI
  console.log('\n  [ÈÄ£Áµ°ÂÖàAPI]');
  await runner.test('GET /api/contacts - „É¨„Çπ„Éù„É≥„ÇπÊßãÈÄ†', async () => {
    const res = await fetch(`${BASE_URL}/api/contacts`);
    const data = await res.json();
    assert(data.hasOwnProperty('data'), 'data„Éó„É≠„Éë„ÉÜ„Ç£„ÅåÂ≠òÂú®„Åó„Å™„ÅÑ');
    assert(data.hasOwnProperty('pagination'), 'pagination„Éó„É≠„Éë„ÉÜ„Ç£„ÅåÂ≠òÂú®„Åó„Å™„ÅÑ');
    assert(Array.isArray(data.data), 'data„ÅåÈÖçÂàó„Åß„Å™„ÅÑ');
  });

  await runner.test('GET /api/contacts - „Éö„Éº„Ç∏„Éç„Éº„Ç∑„Éß„É≥', async () => {
    const res = await fetch(`${BASE_URL}/api/contacts?page=1&limit=5`);
    const data = await res.json();
    assert(data.data.length <= 5, 'Âà∂ÈôêÂÄ§„ÇíË∂Ö„Åà„Çã„Éá„Éº„Çø„ÅåËøî„Åï„Çå„Åü');
    assert(data.pagination.page === 1, '„Éö„Éº„Ç∏Áï™Âè∑„ÅåÊ≠£„Åó„Åè„Å™„ÅÑ');
    assert(data.pagination.limit === 5, 'Âà∂ÈôêÂÄ§„ÅåÊ≠£„Åó„Åè„Å™„ÅÑ');
  });

  await runner.test('GET /api/contacts - Ê§úÁ¥¢Ê©üËÉΩ', async () => {
    const res = await fetch(`${BASE_URL}/api/contacts?search=test`);
    assert(res.status === 200, `„Çπ„ÉÜ„Éº„Çø„Çπ„Ç≥„Éº„Éâ: ${res.status}`);
    const data = await res.json();
    assert(Array.isArray(data.data), 'Ê§úÁ¥¢ÁµêÊûú„ÅåÈÖçÂàó„Åß„Å™„ÅÑ');
  });

  await runner.test('POST /api/contacts - ÂøÖÈ†à„Éï„Ç£„Éº„É´„ÉâÊ§úË®º', async () => {
    const res = await fetch(`${BASE_URL}/api/contacts`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({})
    });
    assert(res.status === 400, `ÊúüÂæÖÂÄ§400, ÂÆüÈöõ${res.status}`);
  });

  await runner.test('POST /api/contacts - Ê≠£Â∏∏„Å™‰ΩúÊàê', async () => {
    const testContact = {
      fullName: `Âçò‰Ωì„ÉÜ„Çπ„Éà_${Date.now()}`,
      email: `unit_test_${Date.now()}@example.com`,
      phone: '090-0000-0000'
    };
    const res = await fetch(`${BASE_URL}/api/contacts`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(testContact)
    });
    assert(res.status === 201, `„Çπ„ÉÜ„Éº„Çø„Çπ„Ç≥„Éº„Éâ: ${res.status}`);
    const data = await res.json();
    assert(data.id, 'ID„ÅåËøî„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ');
    assert(data.fullName === testContact.fullName, 'ÂêçÂâç„Åå‰∏ÄËá¥„Åó„Å™„ÅÑ');
  });

  // 1.2 Áµ±Ë®àAPI
  console.log('\n  [Áµ±Ë®àAPI]');
  await runner.test('GET /api/statistics - „É¨„Çπ„Éù„É≥„ÇπÊßãÈÄ†', async () => {
    const res = await fetch(`${BASE_URL}/api/statistics`);
    const data = await res.json();
    assert(data.overview, 'overview„ÅåÂ≠òÂú®„Åó„Å™„ÅÑ');
    assert(typeof data.overview.totalContacts === 'number', 'totalContacts„ÅåÊï∞ÂÄ§„Åß„Å™„ÅÑ');
    assert(typeof data.overview.totalCompanies === 'number', 'totalCompanies„ÅåÊï∞ÂÄ§„Åß„Å™„ÅÑ');
  });

  await runner.test('GET /api/statistics - „Éá„Éº„ÇøÊï¥ÂêàÊÄß', async () => {
    const res = await fetch(`${BASE_URL}/api/statistics`);
    const data = await res.json();
    assert(data.overview.totalContacts >= 0, 'ÈÄ£Áµ°ÂÖàÊï∞„ÅåË≤†„ÅÆÂÄ§');
    assert(data.overview.totalCompanies >= 0, '‰ºöÁ§æÊï∞„ÅåË≤†„ÅÆÂÄ§');
    assert(data.overview.emailPercentage >= 0 && data.overview.emailPercentage <= 100, 
           '„É°„Éº„É´‰øùÊúâÁéá„Åå0-100%„ÅÆÁØÑÂõ≤Â§ñ');
  });

  // 1.3 „É™„Éû„Ç§„É≥„ÉÄ„ÉºAPI
  console.log('\n  [„É™„Éû„Ç§„É≥„ÉÄ„ÉºAPI]');
  await runner.test('GET /api/reminders - „É¨„Çπ„Éù„É≥„ÇπÊßãÈÄ†', async () => {
    const res = await fetch(`${BASE_URL}/api/reminders`);
    const data = await res.json();
    assert(Array.isArray(data.reminders), 'reminders„ÅåÈÖçÂàó„Åß„Å™„ÅÑ');
    assert(data.stats, 'stats„ÅåÂ≠òÂú®„Åó„Å™„ÅÑ');
    assert(typeof data.stats.total === 'number', 'stats.total„ÅåÊï∞ÂÄ§„Åß„Å™„ÅÑ');
  });

  // 1.4 „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØAPI
  console.log('\n  [„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØAPI]');
  await runner.test('GET /api/network - „É¨„Çπ„Éù„É≥„ÇπÊßãÈÄ†', async () => {
    const res = await fetch(`${BASE_URL}/api/network`);
    const data = await res.json();
    assert(Array.isArray(data.nodes), 'nodes„ÅåÈÖçÂàó„Åß„Å™„ÅÑ');
    assert(Array.isArray(data.links), 'links„ÅåÈÖçÂàó„Åß„Å™„ÅÑ');
    assert(data.stats, 'stats„ÅåÂ≠òÂú®„Åó„Å™„ÅÑ');
  });

  // ========== 2. „Éá„Éº„Çø„Éê„É™„Éá„Éº„Ç∑„Éß„É≥Âçò‰Ωì„ÉÜ„Çπ„Éà ==========
  console.log('\nüìÅ 2. „Éá„Éº„Çø„Éê„É™„Éá„Éº„Ç∑„Éß„É≥Âçò‰Ωì„ÉÜ„Çπ„Éà');
  
  await runner.test('„É°„Éº„É´„Ç¢„Éâ„É¨„ÇπÂΩ¢ÂºèÊ§úË®º', async () => {
    const invalidEmails = ['invalid', '@example.com', 'test@', 'test..@example.com'];
    for (const email of invalidEmails) {
      const res = await fetch(`${BASE_URL}/api/contacts`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          fullName: '„ÉÜ„Çπ„Éà',
          email: email
        })
      });
      // ÁÑ°Âäπ„Å™„É°„Éº„É´„Åß„ÇÇÁôªÈå≤„Åß„Åç„ÇãÂ†¥Âêà„Åå„ÅÇ„Çã„Åü„ÇÅ„ÄÅ„Åì„Åì„Åß„ÅØ„Çπ„ÉÜ„Éº„Çø„Çπ„ÅÆ„Åø„ÉÅ„Çß„ÉÉ„ÇØ
      assert(res.status === 201 || res.status === 400, 
             `ÁÑ°Âäπ„Å™„É°„Éº„É´ ${email} „Åß‰∫àÊúü„Åó„Å™„ÅÑ„Çπ„ÉÜ„Éº„Çø„Çπ: ${res.status}`);
    }
  });

  await runner.test('ÈõªË©±Áï™Âè∑ÂΩ¢ÂºèÊ§úË®º', async () => {
    const validPhones = ['090-1234-5678', '03-1234-5678', '0120-123-456'];
    for (const phone of validPhones) {
      const res = await fetch(`${BASE_URL}/api/contacts`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          fullName: `ÈõªË©±„ÉÜ„Çπ„Éà_${Date.now()}`,
          phone: phone
        })
      });
      assert(res.status === 201, `ÊúâÂäπ„Å™ÈõªË©±Áï™Âè∑ ${phone} „ÅåÊãíÂê¶„Åï„Çå„Åü`);
    }
  });

  // ========== 3. „Éì„Ç∏„Éç„Çπ„É≠„Ç∏„ÉÉ„ÇØÂçò‰Ωì„ÉÜ„Çπ„Éà ==========
  console.log('\nüìÅ 3. „Éì„Ç∏„Éç„Çπ„É≠„Ç∏„ÉÉ„ÇØÂçò‰Ωì„ÉÜ„Çπ„Éà');
  
  await runner.test('‰ºöÁ§æ„ÅÆËá™Âãï‰ΩúÊàêÔºàconnectOrCreateÔºâ', async () => {
    const uniqueCompany = `„ÉÜ„Çπ„Éà‰ºöÁ§æ_${Date.now()}`;
    
    // 1ÂõûÁõÆ: Êñ∞Ë¶è‰ΩúÊàê
    const res1 = await fetch(`${BASE_URL}/api/contacts`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        fullName: '„ÉÜ„Çπ„ÉàÁ§æÂì°1',
        companyName: uniqueCompany
      })
    });
    assert(res1.status === 201, '1ÂõûÁõÆ„ÅÆ‰ΩúÊàê„Å´Â§±Êïó');
    const data1 = await res1.json();
    const companyId1 = data1.company?.id;
    
    // 2ÂõûÁõÆ: Âêå„Åò‰ºöÁ§æÂêç„Åß‰ΩúÊàêÔºàÊó¢Â≠ò„Çí‰ΩøÁî®„Åô„Çã„ÅØ„ÅöÔºâ
    const res2 = await fetch(`${BASE_URL}/api/contacts`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        fullName: '„ÉÜ„Çπ„ÉàÁ§æÂì°2',
        companyName: uniqueCompany
      })
    });
    assert(res2.status === 201, '2ÂõûÁõÆ„ÅÆ‰ΩúÊàê„Å´Â§±Êïó');
    const data2 = await res2.json();
    const companyId2 = data2.company?.id;
    
    assert(companyId1 === companyId2, 'Âêå„Åò‰ºöÁ§æÂêç„ÅßÁï∞„Å™„ÇãID„Åå‰ΩúÊàê„Åï„Çå„Åü');
  });

  await runner.test('„Éö„Éº„Ç∏„Éç„Éº„Ç∑„Éß„É≥Ë®àÁÆó', async () => {
    const res = await fetch(`${BASE_URL}/api/contacts?limit=10`);
    const data = await res.json();
    const expectedPages = Math.ceil(data.pagination.total / 10);
    assert(data.pagination.totalPages === expectedPages, 
           `ÊúüÂæÖÂÄ§: ${expectedPages}„Éö„Éº„Ç∏, ÂÆüÈöõ: ${data.pagination.totalPages}„Éö„Éº„Ç∏`);
  });

  // ========== 4. „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞Âçò‰Ωì„ÉÜ„Çπ„Éà ==========
  console.log('\nüìÅ 4. „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞Âçò‰Ωì„ÉÜ„Çπ„Éà');
  
  await runner.test('Â≠òÂú®„Åó„Å™„ÅÑ„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà', async () => {
    const res = await fetch(`${BASE_URL}/api/nonexistent`);
    assert(res.status === 404, `ÊúüÂæÖÂÄ§404, ÂÆüÈöõ${res.status}`);
  });

  await runner.test('‰∏çÊ≠£„Å™JSON„Éú„Éá„Ç£', async () => {
    const res = await fetch(`${BASE_URL}/api/contacts`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: '{"invalid json'
    });
    assert(res.status === 400 || res.status === 500, 
           `‰∏çÊ≠£„Å™JSON„Åß‰∫àÊúü„Åó„Å™„ÅÑ„Çπ„ÉÜ„Éº„Çø„Çπ: ${res.status}`);
  });

  await runner.test('Â§ß„Åç„Åô„Åé„Çã„É™„ÇØ„Ç®„Çπ„Éà', async () => {
    const largeData = {
      fullName: '„ÉÜ„Çπ„Éà',
      notes: 'x'.repeat(100000) // 100KB „ÅÆ„É°„É¢
    };
    const res = await fetch(`${BASE_URL}/api/contacts`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(largeData)
    });
    // „Çµ„Ç§„Ç∫Âà∂Èôê„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØ413„ÄÅ„Å™„ÅÑÂ†¥Âêà„ÅØ201
    assert(res.status === 201 || res.status === 413, 
           `Â§ß„Åç„Å™„Éá„Éº„Çø„Åß‰∫àÊúü„Åó„Å™„ÅÑ„Çπ„ÉÜ„Éº„Çø„Çπ: ${res.status}`);
  });

  // ========== 5. Ê§úÁ¥¢„Éª„Éï„Ç£„É´„ÇøÂçò‰Ωì„ÉÜ„Çπ„Éà ==========
  console.log('\nüìÅ 5. Ê§úÁ¥¢„Éª„Éï„Ç£„É´„ÇøÂçò‰Ωì„ÉÜ„Çπ„Éà');
  
  await runner.test('ÈÉ®ÂàÜ‰∏ÄËá¥Ê§úÁ¥¢', async () => {
    const res = await fetch(`${BASE_URL}/api/contacts?search=„ÉÜ„Çπ„Éà`);
    assert(res.status === 200, `„Çπ„ÉÜ„Éº„Çø„Çπ„Ç≥„Éº„Éâ: ${res.status}`);
    const data = await res.json();
    assert(Array.isArray(data.data), 'Ê§úÁ¥¢ÁµêÊûú„ÅåÈÖçÂàó„Åß„Å™„ÅÑ');
  });

  await runner.test('Ë§áÊï∞Êù°‰ª∂„Éï„Ç£„É´„Çø', async () => {
    const res = await fetch(`${BASE_URL}/api/contacts?hasPhone=1&hasEmail=1`);
    assert(res.status === 200, `„Çπ„ÉÜ„Éº„Çø„Çπ„Ç≥„Éº„Éâ: ${res.status}`);
    const data = await res.json();
    // „Éï„Ç£„É´„ÇøÁµêÊûú„ÅÆÂêÑ„Ç¢„Ç§„ÉÜ„É†„ÅåÊù°‰ª∂„ÇíÊ∫Ä„Åü„Åô„Åã„ÉÅ„Çß„ÉÉ„ÇØ
    data.data.forEach(contact => {
      if (data.data.length > 0) {
        // „Éá„Éº„Çø„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅÆ„Åø„ÉÅ„Çß„ÉÉ„ÇØ
        assert(contact.phone || contact.email, 
               '„Éï„Ç£„É´„ÇøÊù°‰ª∂„ÇíÊ∫Ä„Åü„Åï„Å™„ÅÑ„Éá„Éº„Çø„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„Çã');
      }
    });
  });

  await runner.test('„ÇΩ„Éº„ÉàÊ©üËÉΩ', async () => {
    const res = await fetch(`${BASE_URL}/api/contacts?sortBy=createdAt&sortOrder=desc`);
    assert(res.status === 200, `„Çπ„ÉÜ„Éº„Çø„Çπ„Ç≥„Éº„Éâ: ${res.status}`);
    const data = await res.json();
    
    // „Éá„Éº„Çø„Åå2‰ª∂‰ª•‰∏ä„ÅÇ„ÇãÂ†¥Âêà„ÄÅ„ÇΩ„Éº„ÉàÈ†Ü„Çí„ÉÅ„Çß„ÉÉ„ÇØ
    if (data.data.length >= 2) {
      const dates = data.data.map(c => new Date(c.createdAt).getTime());
      for (let i = 1; i < dates.length; i++) {
        assert(dates[i-1] >= dates[i], '„ÇΩ„Éº„ÉàÈ†Ü„ÅåÊ≠£„Åó„Åè„Å™„ÅÑ');
      }
    }
  });

  // ========== 6. „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÂçò‰Ωì„ÉÜ„Çπ„Éà ==========
  console.log('\nüìÅ 6. „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÂçò‰Ωì„ÉÜ„Çπ„Éà');
  
  await runner.test('APIÂøúÁ≠îÊôÇÈñì - ÈÄ£Áµ°ÂÖà‰∏ÄË¶ß', async () => {
    const start = Date.now();
    await fetch(`${BASE_URL}/api/contacts`);
    const elapsed = Date.now() - start;
    assert(elapsed < 1000, `ÂøúÁ≠îÊôÇÈñì: ${elapsed}ms (ÊúüÂæÖÂÄ§: 1000ms‰ª•ÂÜÖ)`);
  });

  await runner.test('APIÂøúÁ≠îÊôÇÈñì - Áµ±Ë®à', async () => {
    const start = Date.now();
    await fetch(`${BASE_URL}/api/statistics`);
    const elapsed = Date.now() - start;
    assert(elapsed < 2000, `ÂøúÁ≠îÊôÇÈñì: ${elapsed}ms (ÊúüÂæÖÂÄ§: 2000ms‰ª•ÂÜÖ)`);
  });

  await runner.test('‰∏¶Âàó„É™„ÇØ„Ç®„Çπ„ÉàÂá¶ÁêÜ', async () => {
    const start = Date.now();
    const promises = Array(5).fill(null).map(() => 
      fetch(`${BASE_URL}/api/contacts`)
    );
    const results = await Promise.all(promises);
    const elapsed = Date.now() - start;
    
    results.forEach(res => {
      assert(res.status === 200, '‰∏¶Âàó„É™„ÇØ„Ç®„Çπ„Éà„Åß„Ç®„É©„ÉºÁô∫Áîü');
    });
    assert(elapsed < 3000, `5‰∏¶Âàó„É™„ÇØ„Ç®„Çπ„ÉàÂá¶ÁêÜÊôÇÈñì: ${elapsed}ms (ÊúüÂæÖÂÄ§: 3000ms‰ª•ÂÜÖ)`);
  });

  // ========== 7. „Çª„Ç≠„É•„É™„ÉÜ„Ç£Âçò‰Ωì„ÉÜ„Çπ„Éà ==========
  console.log('\nüìÅ 7. „Çª„Ç≠„É•„É™„ÉÜ„Ç£Âçò‰Ωì„ÉÜ„Çπ„Éà');
  
  await runner.test('SQL„Ç§„É≥„Ç∏„Çß„ÇØ„Ç∑„Éß„É≥ÂØæÁ≠ñ', async () => {
    const maliciousInput = "'; DROP TABLE contacts; --";
    const res = await fetch(`${BASE_URL}/api/contacts?search=${encodeURIComponent(maliciousInput)}`);
    assert(res.status === 200, 'SQL„Ç§„É≥„Ç∏„Çß„ÇØ„Ç∑„Éß„É≥Ë©¶Ë°å„Åß„Çµ„Éº„Éê„Éº„Ç®„É©„Éº');
    // „Éá„Éº„Çø„Éô„Éº„Çπ„Åå„Åæ„Å†Âãï‰Ωú„Åó„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
    const checkRes = await fetch(`${BASE_URL}/api/contacts`);
    assert(checkRes.status === 200, '„Éá„Éº„Çø„Éô„Éº„Çπ„ÅåÁ†¥Êêç„Åó„ÅüÂèØËÉΩÊÄß');
  });

  await runner.test('XSSÂØæÁ≠ñ', async () => {
    const xssPayload = '<script>alert("XSS")</script>';
    const res = await fetch(`${BASE_URL}/api/contacts`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        fullName: xssPayload,
        notes: xssPayload
      })
    });
    
    if (res.status === 201) {
      const data = await res.json();
      // „Ç®„Çπ„Ç±„Éº„Éó„Åï„Çå„Å¶„ÅÑ„Çã„Åã„ÄÅ„Åù„ÅÆ„Åæ„Åæ‰øùÂ≠ò„Åï„Çå„Å¶„ÅÑ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
      assert(!data.fullName.includes('<script>') || data.fullName === xssPayload,
             'XSS„Éö„Ç§„É≠„Éº„Éâ„Åå‰∏çÈÅ©Âàá„Å´Âá¶ÁêÜ„Åï„Çå„Åü');
    }
  });

  // ========== 8. OCRÊ©üËÉΩÂçò‰Ωì„ÉÜ„Çπ„Éà ==========
  console.log('\nüìÅ 8. OCRÊ©üËÉΩÂçò‰Ωì„ÉÜ„Çπ„Éà');
  
  await runner.test('OCR„Ç®„É≥„Éâ„Éù„Ç§„É≥„ÉàÂ≠òÂú®Á¢∫Ë™ç', async () => {
    const res = await fetch(`${BASE_URL}/api/ocr/upload`, {
      method: 'POST'
    });
    assert(res.status !== 404, 'OCR„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà„ÅåÂ≠òÂú®„Åó„Å™„ÅÑ');
  });

  runner.skip('OCRÁîªÂÉèÂá¶ÁêÜÔºàAPI„Ç≠„Éº„ÅåÂøÖË¶ÅÔºâ');

  // „ÉÜ„Çπ„ÉàÁµêÊûú„Çµ„Éû„É™„Éº
  runner.printSummary();
  
  if (runner.results.failed > 0) {
    console.log('\n‚ùå Â§±Êïó„Åó„Åü„ÉÜ„Çπ„Éà:');
    runner.results.tests.filter(t => t.status === 'failed').forEach(t => {
      console.log(`  - ${t.name}`);
      console.log(`    ${t.error}`);
    });
  }
  
  console.log('\n‚ú® Âçò‰Ωì„ÉÜ„Çπ„ÉàÂÆå‰∫Ü');
  process.exit(runner.results.failed > 0 ? 1 : 0);
}

// „ÉÜ„Çπ„ÉàÂÆüË°å
runUnitTests().catch(error => {
  console.error('„ÉÜ„Çπ„ÉàÂÆüË°å„Ç®„É©„Éº:', error);
  process.exit(1);
});